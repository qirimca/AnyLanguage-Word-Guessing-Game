// src/hooks/useKeyboardHandler.ts

import { useEffect, useCallback } from 'react'
import { normalizeLetter } from '../utils/keyboardUtils'

// üóùÔ∏è –ö–∞—Ä—Ç–∞ –∫–ª–∞–≤—ñ—à –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—ó –º–æ–≤–∏
const CRIMEAN_TATAR_KEY_MAP: Record<string, string> = {
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ª—ñ—Ç–µ—Ä–∏
  'q': 'q', 'w': 'w', 'e': 'e', 'r': 'r', 't': 't', 'y': 'y', 'u': 'u', 'o': 'o', 'p': 'p',
  'a': 'a', 's': 's', 'd': 'd', 'f': 'f', 'g': 'g', 'h': 'h', 'j': 'j', 'k': 'k', 'l': 'l',
  'z': 'z', 'x': 'x', 'c': 'c', 'v': 'v', 'b': 'b', 'n': 'n', 'm': 'm',
  
  // –ö—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ª—ñ—Ç–µ—Ä–∏ –∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤–≤–µ–¥–µ–Ω–Ω—è
  'ƒ±': 'ƒ±', 'i': 'i',           // ƒ± (dotless i) —Ç–∞ –∑–≤–∏—á–∞–π–Ω–∞ i
  'ƒü': 'ƒü', '√º': '√º', '√±': '√±', // –û—Å–Ω–æ–≤–Ω—ñ –¥—ñ–∞–∫—Ä–∏—Ç–∏—á–Ω—ñ –ª—ñ—Ç–µ—Ä–∏
  '≈ü': '≈ü', '√∂': '√∂', '√ß': '√ß',  // –Ü–Ω—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ª—ñ—Ç–µ—Ä–∏
  '√§': '√§',                      // √§
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ñ –∫–ª–∞–≤—ñ—à—ñ
  '–êltLeft+i': 'ƒ±',             // Alt+i –¥–ª—è ƒ±
  'AltLeft+g': 'ƒü',             // Alt+g –¥–ª—è ƒü
  'AltLeft+u': '√º',             // Alt+u –¥–ª—è √º
  'AltLeft+n': '√±',             // Alt+n –¥–ª—è √±
  'AltLeft+s': '≈ü',             // Alt+s –¥–ª—è ≈ü
  'AltLeft+o': '√∂',             // Alt+o –¥–ª—è √∂
  'AltLeft+c': '√ß',             // Alt+c –¥–ª—è √ß
  'AltLeft+a': '√§',             // Alt+a –¥–ª—è √§
}

// üéØ –¢–∏–ø –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–ª–∞–≤—ñ—à
interface KeyboardHandlerProps {
  onKeyPress: (key: string) => void
  onEnter: () => void
  onBackspace: () => void
  disabled?: boolean
}

// ‚å®Ô∏è –•—É–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ—ñ–∑–∏—á–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
export const useKeyboardHandler = ({
  onKeyPress,
  onEnter,
  onBackspace,
  disabled = false
}: KeyboardHandlerProps) => {
  
  // üîß –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–ª–∞–≤—ñ—à
  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    // –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫—â–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ
    if (disabled) return
    
    // –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–ª–∞–≤—ñ—à–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –æ–∫—Ä–µ–º–æ
    if (event.ctrlKey || event.metaKey) return
    
    const key = event.key.toLowerCase()
    
    // üîô Backspace
    if (key === 'backspace') {
      event.preventDefault()
      onBackspace()
      return
    }
    
    // ‚úÖ Enter
    if (key === 'enter') {
      event.preventDefault()
      onEnter()
      return
    }
    
    // üî§ –û–±—Ä–æ–±–∫–∞ –ª—ñ—Ç–µ—Ä
    let mappedKey = key
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∑ Alt
    if (event.altKey) {
      const altCombo = `AltLeft+${key}`
      if (CRIMEAN_TATAR_KEY_MAP[altCombo]) {
        mappedKey = CRIMEAN_TATAR_KEY_MAP[altCombo]
      }
    } else if (CRIMEAN_TATAR_KEY_MAP[key]) {
      mappedKey = CRIMEAN_TATAR_KEY_MAP[key]
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—ó
    if (isValidCrimeanTatarLetter(mappedKey)) {
      event.preventDefault()
      onKeyPress(normalizeLetter(mappedKey))
    }
  }, [onKeyPress, onEnter, onBackspace, disabled])
  
  // üé£ –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π
  useEffect(() => {
    if (disabled) return
    
    document.addEventListener('keydown', handleKeyDown)
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown)
    }
  }, [handleKeyDown, disabled])
}

// ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –ª—ñ—Ç–µ—Ä–∞ –≤–∞–ª—ñ–¥–Ω–æ—é –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—ó –º–æ–≤–∏
const isValidCrimeanTatarLetter = (letter: string): boolean => {
  // –ö—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–∏–π –∞–ª—Ñ–∞–≤—ñ—Ç
  const crimeanTatarAlphabet = 'abc√ßdefgƒühƒ±ijklmn√±opqrs≈ütu√ºvwxyz'
  const normalizedLetter = normalizeLetter(letter)
  
  return crimeanTatarAlphabet.includes(normalizedLetter) && letter.length === 1
}

// üé® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–∫–∞–∑–æ–∫ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
export const KeyboardHints: React.FC = () => {
  return (
    <div className="keyboard-hints">
      <div className="keyboard-hints__title">
        ‚å®Ô∏è –§—ñ–∑–∏—á–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:
      </div>
      <div className="keyboard-hints__content">
        <div className="keyboard-hints__section">
          <strong>–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ª—ñ—Ç–µ—Ä–∏:</strong>
          <ul>
            <li><code>Alt + i</code> ‚Üí ƒ±</li>
            <li><code>Alt + g</code> ‚Üí ƒü</li>
            <li><code>Alt + u</code> ‚Üí √º</li>
            <li><code>Alt + n</code> ‚Üí √±</li>
            <li><code>Alt + s</code> ‚Üí ≈ü</li>
            <li><code>Alt + o</code> ‚Üí √∂</li>
            <li><code>Alt + c</code> ‚Üí √ß</li>
            <li><code>Alt + a</code> ‚Üí √§</li>
          </ul>
        </div>
        <div className="keyboard-hints__section">
          <strong>–ö–µ—Ä—É–≤–∞–Ω–Ω—è:</strong>
          <ul>
            <li><code>Enter</code> ‚Üí –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ª–æ–≤–æ</li>
            <li><code>Backspace</code> ‚Üí –í–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ—Ç–µ—Ä—É</li>
          </ul>
        </div>
      </div>
    </div>
  )
}

export default useKeyboardHandler
