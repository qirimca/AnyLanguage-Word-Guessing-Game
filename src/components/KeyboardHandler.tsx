// –§–∞–π–ª: src/components/KeyboardHandler.tsx
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ—ñ–∑–∏—á–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–∏—Ö –ª—ñ—Ç–µ—Ä

import { useEffect } from 'react'
import { ORTHOGRAPHY_LETTERS } from '../constants/orthography'

interface KeyboardHandlerProps {
  onChar: (letter: string) => void
  onDelete: () => void
  onEnter: () => void
  isRevealing?: boolean
  isGameWon?: boolean
  isGameLost?: boolean
}

// –ú–∞–ø—ñ–Ω–≥ –∫–ª–∞–≤—ñ—à –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–∏—Ö –ª—ñ—Ç–µ—Ä
const CRIMEAN_TATAR_KEY_MAPPING: { [key: string]: string } = {
  // –û—Å–Ω–æ–≤–Ω—ñ –ª—ñ—Ç–µ—Ä–∏ —è–∫—ñ —î —ñ –≤ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ–π —Ä–æ–∑–∫–ª–∞–¥—Ü—ñ
  'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f',
  'g': 'g', 'h': 'h', 'j': 'j', 'k': 'k', 'l': 'l', 'm': 'm',
  'n': 'n', 'o': 'o', 'p': 'p', 'q': 'q', 'r': 'r', 's': 's',
  't': 't', 'u': 'u', 'v': 'v', 'w': 'w', 'x': 'x', 'y': 'y', 'z': 'z',
  
  // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ —á–µ—Ä–µ–∑ Alt+–∫–ª–∞–≤—ñ—à–∞
  'i': 'i',     // –∑–≤–∏—á–∞–π–Ω–∞ i
  'I': 'ƒ±',     // dotless i (Alt+I –∞–±–æ Shift+i —É –¥–µ—è–∫–∏—Ö —Ä–æ–∑–∫–ª–∞–¥–∫–∞—Ö)
  
  // –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∫–ª–∞–≤—ñ—à –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
  // Alt+G –¥–ª—è ƒü, Alt+U –¥–ª—è √º, —Ç–æ—â–æ
  'Alt+g': 'ƒü',
  'Alt+u': '√º',
  'Alt+n': '√±',
  'Alt+s': '≈ü',
  'Alt+o': '√∂',
  'Alt+c': '√ß',
  'Alt+a': '√¢',

  // –¢–∞–∫–æ–∂ –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ AltGr
  'AltGraph+g': 'ƒü',
  'AltGraph+u': '√º',
  'AltGraph+n': '√±',
  'AltGraph+s': '≈ü',
  'AltGraph+o': '√∂',
  'AltGraph+c': '√ß',
  'AltGraph+a': '√¢',

  // –í–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ Shift+Alt
  'Shift+Alt+g': 'ƒü',
  'Shift+Alt+u': '√º',
  'Shift+Alt+n': '√±',
  'Shift+Alt+s': '≈ü',
  'Shift+Alt+o': '√∂',
  'Shift+Alt+c': '√ß',
  'Shift+Alt+a': '√¢',
  'Shift+Alt+i': 'ƒ±', // dotless i
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è dotless i
const DOTLESS_I_COMBINATIONS = [
  'Alt+i',
  'AltGraph+i', 
  'Shift+Alt+i',
  'Ctrl+Alt+i'
]

export const KeyboardHandler: React.FC<KeyboardHandlerProps> = ({
  onChar,
  onDelete,
  onEnter,
  isRevealing = false,
  isGameWon = false,
  isGameLost = false
}) => {
  
  useEffect(() => {
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
    const getKeyCombo = (event: KeyboardEvent): string => {
      const modifiers = []
      if (event.ctrlKey) modifiers.push('Ctrl')
      if (event.altKey) modifiers.push('Alt')
      if (event.shiftKey) modifiers.push('Shift')
      if (event.getModifierState('AltGraph')) modifiers.push('AltGraph')
      
      const key = event.key.toLowerCase()
      if (modifiers.length > 0) {
        return `${modifiers.join('+')}+${key}`
      }
      return key
    }
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ —î –ª—ñ—Ç–µ—Ä–∞ –≤ –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ–º—É –∞–ª—Ñ–∞–≤—ñ—Ç—ñ
    const isValidCrimeanTatarLetter = (letter: string): boolean => {
      return ORTHOGRAPHY_LETTERS.includes(letter.toLowerCase())
    }
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à
    const listener = (event: KeyboardEvent) => {
      // –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–¥—ñ—ó –ø—ñ–¥ —á–∞—Å –ø–æ–∫–∞–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ—ó –≥—Ä–∏
      if (isRevealing || isGameWon || isGameLost) {
        return
      }
      
      // –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –≤ input –ø–æ–ª–µ
      const target = event.target as HTMLElement
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
        return
      }
      
      const keyCombo = getKeyCombo(event)
      
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–ª–∞–≤—ñ—à—ñ
      if (event.code === 'Backspace') {
        event.preventDefault()
        onDelete()
        return
      }
      
      if (event.code === 'Enter') {
        event.preventDefault()
        onEnter()
        return
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–∏—Ö –ª—ñ—Ç–µ—Ä
      if (CRIMEAN_TATAR_KEY_MAPPING[keyCombo]) {
        event.preventDefault()
        const letter = CRIMEAN_TATAR_KEY_MAPPING[keyCombo]
        if (isValidCrimeanTatarLetter(letter)) {
          onChar(letter)
        }
        return
      }
      
      // –ó–≤–∏—á–∞–π–Ω—ñ –ª—ñ—Ç–µ—Ä–∏
      const letter = event.key.toLowerCase()
      
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è dotless i
      if (letter === 'i' && (event.altKey || event.getModifierState('AltGraph'))) {
        event.preventDefault()
        onChar('ƒ±') // dotless i
        return
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥–æ–ø—É—Å—Ç–∏–º–∞ –ª—ñ—Ç–µ—Ä–∞
      if (letter.length === 1 && letter >= 'a' && letter <= 'z') {
        if (isValidCrimeanTatarLetter(letter)) {
          event.preventDefault()
          onChar(letter)
        }
      }
      
      // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥—É –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–∏—Ö –ª—ñ—Ç–µ—Ä (—è–∫—â–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞)
      if (event.key.length === 1 && isValidCrimeanTatarLetter(event.key)) {
        event.preventDefault()
        onChar(event.key.toLowerCase())
      }
    }
    
    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á–∞ –ø–æ–¥—ñ–π
    window.addEventListener('keydown', listener)
    
    return () => {
      window.removeEventListener('keydown', listener)
    }
  }, [onChar, onDelete, onEnter, isRevealing, isGameWon, isGameLost])
  
  return null // –¶–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –Ω—ñ—á–æ–≥–æ
}

// –§–∞–π–ª: src/components/KeyboardInstructions.tsx
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ —â–æ–¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

import React from 'react'

export const KeyboardInstructions: React.FC = () => {
  return (
    <div className="keyboard-instructions bg-gray-100 p-4 rounded-lg mb-4 text-sm">
      <h3 className="font-bold text-lg mb-2">‚å®Ô∏è –Ø–∫ –≤–≤–æ–¥–∏—Ç–∏ –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏:</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <h4 className="font-semibold mb-2">üî§ –û—Å–Ω–æ–≤–Ω—ñ –ª—ñ—Ç–µ—Ä–∏:</h4>
          <ul className="space-y-1">
            <li><code className="bg-gray-200 px-1 rounded">a-z</code> - –∑–≤–∏—á–∞–π–Ω—ñ –ª—ñ—Ç–µ—Ä–∏</li>
            <li><code className="bg-gray-200 px-1 rounded">i</code> - –∑–≤–∏—á–∞–π–Ω–∞ i</li>
            <li><code className="bg-gray-200 px-1 rounded">q</code> - –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–µ q</li>
          </ul>
        </div>
        
        <div>
          <h4 className="font-semibold mb-2">üî£ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ª—ñ—Ç–µ—Ä–∏:</h4>
          <ul className="space-y-1">
            <li><code className="bg-gray-200 px-1 rounded">Alt + a</code> ‚Üí <strong>√¢</strong></li>
            <li><code className="bg-gray-200 px-1 rounded">Alt + i</code> ‚Üí <strong>ƒ±</strong> (dotless i)</li>
            <li><code className="bg-gray-200 px-1 rounded">Alt + g</code> ‚Üí <strong>ƒü</strong></li>
            <li><code className="bg-gray-200 px-1 rounded">Alt + u</code> ‚Üí <strong>√º</strong></li>
            <li><code className="bg-gray-200 px-1 rounded">Alt + n</code> ‚Üí <strong>√±</strong></li>
            <li><code className="bg-gray-200 px-1 rounded">Alt + s</code> ‚Üí <strong>≈ü</strong></li>
            <li><code className="bg-gray-200 px-1 rounded">Alt + o</code> ‚Üí <strong>√∂</strong></li>
            <li><code className="bg-gray-200 px-1 rounded">Alt + c</code> ‚Üí <strong>√ß</strong></li>
          </ul>
        </div>
      </div>
      
      <div className="mt-4 p-3 bg-blue-50 rounded border-l-4 border-blue-400">
        <p className="text-blue-800">
          <strong>üí° –ü–æ—Ä–∞–¥–∞:</strong> –Ø–∫—â–æ —É –≤–∞—Å –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞, 
          –≤–∏ –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç–∏ –ª—ñ—Ç–µ—Ä–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ. –¢–∞–∫–æ–∂ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∑ AltGr.
        </p>
      </div>
      
      <div className="mt-3 p-3 bg-green-50 rounded border-l-4 border-green-400">
        <p className="text-green-800">
          <strong>‚å®Ô∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è:</strong> –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ <code className="bg-gray-200 px-1 rounded">Backspace</code> –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è 
          —Ç–∞ <code className="bg-gray-200 px-1 rounded">Enter</code> –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–ª–æ–≤–∞.
        </p>
      </div>
    </div>
  )
}

// –§–∞–π–ª: src/utils/keyboardUtils.ts
// –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é

import { ORTHOGRAPHY_LETTERS } from '../constants/orthography'

/**
 * –ù–æ—Ä–º–∞–ª—ñ–∑—É—î –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–≥—ñ–¥–Ω–æ –∑ Unicode NFC
 */
export const normalizeText = (text: string): string => {
  return text.normalize('NFC')
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Å–∏–º–≤–æ–ª –¥–æ–ø—É—Å—Ç–∏–º–æ—é –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—é –ª—ñ—Ç–µ—Ä–æ—é
 */
export const isValidCrimeanTatarLetter = (char: string): boolean => {
  return ORTHOGRAPHY_LETTERS.includes(normalizeText(char.toLowerCase()))
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–¥–∞—Ç–Ω–∏–π –¥–ª—è –≥—Ä–∏
 */
export const sanitizeInput = (input: string): string => {
  return normalizeText(input.toLowerCase())
    .split('')
    .filter(isValidCrimeanTatarLetter)
    .join('')
}

/**
 * –ú–∞–ø—ñ–Ω–≥ –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –ª—ñ—Ç–µ—Ä
 */
export const LETTER_VARIANTS: { [key: string]: string } = {
  // –í–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è dotless i
  'iÃá': 'i',   // i –∑ –∫—Ä–∞–ø–∫–æ—é –∑–≤–µ—Ä—Ö—É
  'ƒ±': 'ƒ±',   // dotless i
  
  // –í–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –ª—ñ—Ç–µ—Ä –∑ –¥—ñ–∞–∫—Ä–∏—Ç–∏–∫–∞–º–∏
  'gÃÉ': 'ƒü',   // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è ƒü
  '√±': '√±',   // n –∑ tilde
  '√ß': '√ß',   // c –∑ cedilla
  '≈ü': '≈ü',   // s –∑ cedilla
  
  // –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–¥–≤—ñ–π–Ω–∏—Ö –¥—ñ–∞–∫—Ä–∏—Ç–∏–∫—ñ–≤
  '√º√º': '√º',
  '√∂√∂': '√∂',
}

/**
 * –ù–æ—Ä–º–∞–ª—ñ–∑—É—î –ª—ñ—Ç–µ—Ä—É –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É
 */
export const normalizeLetter = (letter: string): string => {
  const normalized = normalizeText(letter.toLowerCase())
  return LETTER_VARIANTS[normalized] || normalized
}