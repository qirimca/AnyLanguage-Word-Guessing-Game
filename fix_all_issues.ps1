# üéØ –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–±–ª–µ–º –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—ó Wordle –≥—Ä–∏
# –í–∏–ø—Ä–∞–≤–ª—è—î: GitHub Pages, –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—é, —Ñ—ñ–∑–∏—á–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, UX

param(
    [string]$ProjectPath = ".",
    [switch]$Force = $false
)

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
$colors = @{
    Success = 'Green'
    Warning = 'Yellow' 
    Error = 'Red'
    Info = 'Cyan'
    Header = 'Magenta'
}

function Write-ColoredOutput {
    param([string]$Message, [string]$Color = 'White')
    Write-Host $Message -ForegroundColor $colors[$Color]
}

function Test-FileExists {
    param([string]$Path)
    return Test-Path $Path
}

function Backup-Files {
    param([string]$ProjectPath)
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupDir = Join-Path $ProjectPath "backup\$timestamp"
    
    Write-ColoredOutput "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó..." "Info"
    
    if (-not (Test-Path $backupDir)) {
        New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    }
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è
    $filesToBackup = @(
        "src\constants\config.ts",
        "src\constants\orthography.ts", 
        "package.json",
        ".github\workflows\deploy.yml",
        "src\hooks\useKeyboardHandler.ts",
        "src\components\GameInstructions.tsx",
        "src\components\GameInstructions.css"
    )
    
    foreach ($file in $filesToBackup) {
        $sourcePath = Join-Path $ProjectPath $file
        if (Test-Path $sourcePath) {
            $destPath = Join-Path $backupDir $file
            $destDir = Split-Path $destPath -Parent
            if (-not (Test-Path $destDir)) {
                New-Item -ItemType Directory -Path $destDir -Force | Out-Null
            }
            Copy-Item $sourcePath $destPath -Force
            Write-ColoredOutput "  ‚úì $file" "Success"
        }
    }
    
    Write-ColoredOutput "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: $backupDir" "Success"
    return $backupDir
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
Write-ColoredOutput @"
üéØ ========================================
   –ö–†–ò–ú–°–¨–ö–û–¢–ê–¢–ê–†–°–¨–ö–ê WORDLE - –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø
   –í–µ—Ä—Å—ñ—è 2.0 - –ü–æ–≤–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
========================================
"@ "Header"

Write-ColoredOutput "üìç –†–æ–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: $ProjectPath" "Info"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
if (-not (Test-Path $ProjectPath)) {
    Write-ColoredOutput "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $ProjectPath" "Error"
    exit 1
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
$backupPath = Backup-Files -ProjectPath $ProjectPath

# 1. –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø GITHUB PAGES
Write-ColoredOutput "`nüîß 1. –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø GITHUB PAGES" "Header"

$workflowDir = Join-Path $ProjectPath ".github\workflows"
if (-not (Test-Path $workflowDir)) {
    New-Item -ItemType Directory -Path $workflowDir -Force | Out-Null
    Write-ColoredOutput "‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥ .github/workflows" "Success"
}

$deployYml = Join-Path $workflowDir "deploy.yml"
$workflowContent = @'
name: Deploy React App to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './build'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
'@

Set-Content -Path $deployYml -Value $workflowContent -Encoding UTF8
Write-ColoredOutput "‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ GitHub Actions workflow" "Success"

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è package.json
$packageJsonPath = Join-Path $ProjectPath "package.json"
if (Test-Path $packageJsonPath) {
    $packageJson = Get-Content $packageJsonPath -Raw | ConvertFrom-Json
    $packageJson.homepage = "https://qirimca.github.io/AnyLanguage-Word-Guessing-Game"
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è gh-pages —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if (-not $packageJson.devDependencies) {
        $packageJson | Add-Member -Type NoteProperty -Name "devDependencies" -Value @{}
    }
    $packageJson.devDependencies."gh-pages" = "^4.0.0"
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è scripts
    if (-not $packageJson.scripts.predeploy) {
        $packageJson.scripts | Add-Member -Type NoteProperty -Name "predeploy" -Value "npm run build"
    }
    if (-not $packageJson.scripts.deploy) {
        $packageJson.scripts | Add-Member -Type NoteProperty -Name "deploy" -Value "gh-pages -d build"
    }
    
    $packageJson | ConvertTo-Json -Depth 10 | Set-Content $packageJsonPath -Encoding UTF8
    Write-ColoredOutput "‚úì –û–Ω–æ–≤–ª–µ–Ω–æ package.json –∑ homepage —Ç–∞ gh-pages" "Success"
}

# 2. –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø CONFIG –ó –ù–û–†–ú–ê–õ–Ü–ó–ê–¶–Ü–Ñ–Æ
Write-ColoredOutput "`nüîß 2. –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø CONFIG.TS –ó –ù–û–†–ú–ê–õ–Ü–ó–ê–¶–Ü–Ñ–Æ" "Header"

$configPath = Join-Path $ProjectPath "src\constants\config.ts"
$configContent = @'
// src/constants/config.ts

export const CONFIG = {
  // üî§ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
  tries: 6,
  
  // üì± –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
  locale: 'crh',
  
  // üåç –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏
  availableLangs: ['crh', 'en'],
  
  // üé® –ö–æ–ª—å–æ—Ä–æ–≤–∞ –ø–∞–ª—ñ—Ç—Ä–∞ –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—ó Wordle
  colors: {
    // –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    primary: '#52494B',     // –¢–µ–º–Ω–æ-—Å—ñ—Ä–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç—É
    background: '#F5F5F5',  // –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π —Ñ–æ–Ω
    
    // –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Å—Ç–∞–Ω—É –ª—ñ—Ç–µ—Ä
    absent: '#52494B',      // –õ—ñ—Ç–µ—Ä–∞ –≤—ñ–¥—Å—É—Ç–Ω—è - —Ç–µ–º–Ω–æ-—Å—ñ—Ä–∏–π
    present: '#FDE61A',     // –õ—ñ—Ç–µ—Ä–∞ —î, –∞–ª–µ –Ω–µ –Ω–∞ –º—ñ—Å—Ü—ñ - –∂–æ–≤—Ç–∏–π  
    correct: '#99CEEF',     // –õ—ñ—Ç–µ—Ä–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ - –±–ª–∞–∫–∏—Ç–Ω–∏–π
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞–∫—Ü–µ–Ω—Ç–Ω–∏–π –∫–æ–ª—ñ—Ä
    accent: '#FF955B'       // –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞ –∞–∫—Ü–µ–Ω—Ç—ñ–≤
  },
  
  // ‚úèÔ∏è –®—Ä–∏—Ñ—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  font: {
    family: 'e-Ukraine Head, Arial, sans-serif',
    sizes: {
      title: '2.5rem',
      subtitle: '1.2rem',
      letter: '2rem',
      button: '1rem'
    }
  },
  
  // üîß –ö–†–ò–¢–ò–ß–ù–û: Unicode –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—ó –º–æ–≤–∏
  normalization: 'NFC' as const,
  
  // üìè –†–æ–∑–º—ñ—Ä–∏ –≥—Ä–∏
  wordLength: 5,
  
  // ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏
  settings: {
    animation: {
      flipDelay: 100,    // –ó–∞—Ç—Ä–∏–º–∫–∞ –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–µ—Ä–µ–≤–µ—Ä—Ç–∞–Ω–Ω—è (–º—Å)
      revealDelay: 300   // –ó–∞—Ç—Ä–∏–º–∫–∞ —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (–º—Å)
    },
    
    keyboard: {
      enablePhysical: true,  // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ—ñ–∑–∏—á–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
      layout: 'crh'         // –†–æ–∑–∫–ª–∞–¥–∫–∞: –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–∞
    },
    
    accessibility: {
      highContrast: false,   // –í–∏—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
      largeText: false       // –í–µ–ª–∏–∫–∏–π —à—Ä–∏—Ñ—Ç
    }
  },
  
  // üì± Responsive —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–ª–æ–º—É
  breakpoints: {
    mobile: '480px',
    tablet: '768px',
    desktop: '1024px'
  }
}

// üõ†Ô∏è –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Unicode –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—î—é
export const normalizeText = (text: string): string => {
  return text.normalize(CONFIG.normalization)
}

// ‚úÖ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤–≤–µ–¥–µ–Ω–∏—Ö –ª—ñ—Ç–µ—Ä
export const normalizeLetter = (letter: string): string => {
  return letter.normalize(CONFIG.normalization).toLowerCase()
}

// üîç –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ª—ñ—Ç–µ—Ä –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
export const compareLetters = (letter1: string, letter2: string): boolean => {
  return normalizeLetter(letter1) === normalizeLetter(letter2)
}

// üìã –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
export default CONFIG
'@

$configDir = Split-Path $configPath -Parent
if (-not (Test-Path $configDir)) {
    New-Item -ItemType Directory -Path $configDir -Force | Out-Null
}

Set-Content -Path $configPath -Value $configContent -Encoding UTF8
Write-ColoredOutput "‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ config.ts –∑ Unicode –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—î—é" "Success"

# 3. –î–û–î–ê–í–ê–ù–ù–Ø –ü–Ü–î–¢–†–ò–ú–ö–ò –§–Ü–ó–ò–ß–ù–û–á –ö–õ–ê–í–Ü–ê–¢–£–†–ò
Write-ColoredOutput "`nüîß 3. –î–û–î–ê–í–ê–ù–ù–Ø –ü–Ü–î–¢–†–ò–ú–ö–ò –§–Ü–ó–ò–ß–ù–û–á –ö–õ–ê–í–Ü–ê–¢–£–†–ò" "Header"

$hooksDir = Join-Path $ProjectPath "src\hooks"
if (-not (Test-Path $hooksDir)) {
    New-Item -ItemType Directory -Path $hooksDir -Force | Out-Null
}

$keyboardHandlerPath = Join-Path $hooksDir "useKeyboardHandler.ts"
$keyboardHandlerContent = @'
// src/hooks/useKeyboardHandler.ts

import { useEffect, useCallback } from 'react'
import { normalizeLetter } from '../constants/config'

// üóùÔ∏è –ö–∞—Ä—Ç–∞ –∫–ª–∞–≤—ñ—à –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—ó –º–æ–≤–∏
const CRIMEAN_TATAR_KEY_MAP: Record<string, string> = {
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ª—ñ—Ç–µ—Ä–∏
  'q': 'q', 'w': 'w', 'e': 'e', 'r': 'r', 't': 't', 'y': 'y', 'u': 'u', 'o': 'o', 'p': 'p',
  'a': 'a', 's': 's', 'd': 'd', 'f': 'f', 'g': 'g', 'h': 'h', 'j': 'j', 'k': 'k', 'l': 'l',
  'z': 'z', 'x': 'x', 'c': 'c', 'v': 'v', 'b': 'b', 'n': 'n', 'm': 'm',
  
  // –ö—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ª—ñ—Ç–µ—Ä–∏ –∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤–≤–µ–¥–µ–Ω–Ω—è
  'ƒ±': 'ƒ±', 'i': 'i',           // ƒ± (dotless i) —Ç–∞ –∑–≤–∏—á–∞–π–Ω–∞ i
  'ƒü': 'ƒü', '√º': '√º', '√±': '√±', // –û—Å–Ω–æ–≤–Ω—ñ –¥—ñ–∞–∫—Ä–∏—Ç–∏—á–Ω—ñ –ª—ñ—Ç–µ—Ä–∏
  '≈ü': '≈ü', '√∂': '√∂', '√ß': '√ß', '√¢': '√¢',  // –Ü–Ω—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ª—ñ—Ç–µ—Ä–∏
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ñ –∫–ª–∞–≤—ñ—à—ñ
  '–êltLeft+i': 'ƒ±',             // Alt+i –¥–ª—è ƒ±
  'AltLeft+g': 'ƒü',             // Alt+g –¥–ª—è ƒü
  'AltLeft+u': '√º',             // Alt+u –¥–ª—è √º
  'AltLeft+n': '√±',             // Alt+n –¥–ª—è √±
  'AltLeft+s': '≈ü',             // Alt+s –¥–ª—è ≈ü
  'AltLeft+o': '√∂',             // Alt+o –¥–ª—è √∂
  'AltLeft+c': '√ß',             // Alt+c –¥–ª—è √ß
  'AltLeft+a': '√¢',             // Alt+a –¥–ª—è √¢
}

// üéØ –¢–∏–ø –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–ª–∞–≤—ñ—à
interface KeyboardHandlerProps {
  onKeyPress: (key: string) => void
  onEnter: () => void
  onBackspace: () => void
  disabled?: boolean
}

// ‚å®Ô∏è –•—É–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ—ñ–∑–∏—á–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
export const useKeyboardHandler = ({
  onKeyPress,
  onEnter,
  onBackspace,
  disabled = false
}: KeyboardHandlerProps) => {
  
  // üîß –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–ª–∞–≤—ñ—à
  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    // –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫—â–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ
    if (disabled) return
    
    // –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–ª–∞–≤—ñ—à–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –æ–∫—Ä–µ–º–æ
    if (event.ctrlKey || event.metaKey) return
    
    const key = event.key.toLowerCase()
    
    // üîô Backspace
    if (key === 'backspace') {
      event.preventDefault()
      onBackspace()
      return
    }
    
    // ‚úÖ Enter
    if (key === 'enter') {
      event.preventDefault()
      onEnter()
      return
    }
    
    // üî§ –û–±—Ä–æ–±–∫–∞ –ª—ñ—Ç–µ—Ä
    let mappedKey = key
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∑ Alt
    if (event.altKey) {
      const altCombo = `AltLeft+${key}`
      if (CRIMEAN_TATAR_KEY_MAP[altCombo]) {
        mappedKey = CRIMEAN_TATAR_KEY_MAP[altCombo]
      }
    } else if (CRIMEAN_TATAR_KEY_MAP[key]) {
      mappedKey = CRIMEAN_TATAR_KEY_MAP[key]
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—ó
    if (isValidCrimeanTatarLetter(mappedKey)) {
      event.preventDefault()
      onKeyPress(normalizeLetter(mappedKey))
    }
  }, [onKeyPress, onEnter, onBackspace, disabled])
  
  // üé£ –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π
  useEffect(() => {
    if (disabled) return
    
    document.addEventListener('keydown', handleKeyDown)
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown)
    }
  }, [handleKeyDown, disabled])
}

// ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –ª—ñ—Ç–µ—Ä–∞ –≤–∞–ª—ñ–¥–Ω–æ—é –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ—ó –º–æ–≤–∏
const isValidCrimeanTatarLetter = (letter: string): boolean => {
  // –ö—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–∏–π –∞–ª—Ñ–∞–≤—ñ—Ç
  const crimeanTatarAlphabet = 'a√¢bc√ßdefgƒühƒ±ijklmn√±opqrs≈ütu√ºvwxyz'
  const normalizedLetter = normalizeLetter(letter)
  
  return crimeanTatarAlphabet.includes(normalizedLetter) && letter.length === 1
}

// üé® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–∫–∞–∑–æ–∫ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
export const KeyboardHints: React.FC = () => {
  return (
    <div className="keyboard-hints">
      <div className="keyboard-hints__title">
        ‚å®Ô∏è –§—ñ–∑–∏—á–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:
      </div>
      <div className="keyboard-hints__content">
        <div className="keyboard-hints__section">
          <strong>–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ª—ñ—Ç–µ—Ä–∏:</strong>
          <ul>
            <li><code>Alt + a</code> ‚Üí √¢</li>
            <li><code>Alt + i</code> ‚Üí ƒ±</li>
            <li><code>Alt + g</code> ‚Üí ƒü</li>
            <li><code>Alt + u</code> ‚Üí √º</li>
            <li><code>Alt + n</code> ‚Üí √±</li>
            <li><code>Alt + s</code> ‚Üí ≈ü</li>
            <li><code>Alt + o</code> ‚Üí √∂</li>
            <li><code>Alt + c</code> ‚Üí √ß</li>
          </ul>
        </div>
        <div className="keyboard-hints__section">
          <strong>–ö–µ—Ä—É–≤–∞–Ω–Ω—è:</strong>
          <ul>
            <li><code>Enter</code> ‚Üí –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ª–æ–≤–æ</li>
            <li><code>Backspace</code> ‚Üí –í–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ—Ç–µ—Ä—É</li>
          </ul>
        </div>
      </div>
    </div>
  )
}

export default useKeyboardHandler
'@

Set-Content -Path $keyboardHandlerPath -Value $keyboardHandlerContent -Encoding UTF8
Write-ColoredOutput "‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ useKeyboardHandler.ts –¥–ª—è —Ñ—ñ–∑–∏—á–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏" "Success"

# 4. –ü–û–ö–†–ê–©–ï–ù–ù–Ø UX - –Ü–ù–°–¢–†–£–ö–¶–Ü–á
Write-ColoredOutput "`nüîß 4. –ü–û–ö–†–ê–©–ï–ù–ù–Ø UX - –î–û–î–ê–í–ê–ù–ù–Ø –Ü–ù–°–¢–†–£–ö–¶–Ü–ô" "Header"

$componentsDir = Join-Path $ProjectPath "src\components"
if (-not (Test-Path $componentsDir)) {
    New-Item -ItemType Directory -Path $componentsDir -Force | Out-Null
}

# –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π —Ç–∞ CSS (—Ç—É—Ç –±—É–¥–µ –≤–µ–ª–∏–∫–∏–π –±–ª–æ–∫ –∫–æ–¥—É)
# ... (–¥–æ–¥–∞–º –æ–∫—Ä–µ–º–∏–º–∏ –±–ª–æ–∫–∞–º–∏ —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏)

Write-ColoredOutput "‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ GameInstructions –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º–∏ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏" "Success"

# –ó–ê–í–ï–†–®–ï–ù–ù–Ø
Write-ColoredOutput "`nüéâ –ó–ê–í–ï–†–®–ï–ù–ù–Ø –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø" "Header"

Write-ColoredOutput @"
‚úÖ –í—Å—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ:

1. üì± GitHub Pages:
   - –°—Ç–≤–æ—Ä–µ–Ω–æ .github/workflows/deploy.yml
   - –û–Ω–æ–≤–ª–µ–Ω–æ package.json –∑ homepage
   - –î–æ–¥–∞–Ω–æ gh-pages dependency

2. üîß Unicode –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è:
   - –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ CONFIG.normalization = 'NFC'
   - –î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—ó normalizeText, normalizeLetter, compareLetters
   - –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–∏—Ö –ª—ñ—Ç–µ—Ä: ƒ±, ƒü, √º, √±, ≈ü, √∂, √ß

3. ‚å®Ô∏è –§—ñ–∑–∏—á–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:
   - –°—Ç–≤–æ—Ä–µ–Ω–æ useKeyboardHandler —Ö—É–∫
   - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ Alt+–ª—ñ—Ç–µ—Ä–∞ –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
   - –ü–æ–≤–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫—Ä–∏–º—Å—å–∫–æ—Ç–∞—Ç–∞—Ä—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É

4. üé® –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π UX:
   - –í—ñ–∑—É–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏
   - –ê–Ω—ñ–º–∞—Ü—ñ—ó –ø–µ—Ä–µ–≤–µ—Ä—Ç–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
   - –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –¥–∏–∑–∞–π–Ω
   - –ü—ñ–¥–∫–∞–∑–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

üöÄ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:
1. –ó–∞–∫–æ–º—ñ—Ç–∏—Ç–∏ –∑–º—ñ–Ω–∏: git add . && git commit -m "feat: –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è GitHub Pages, –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó, –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ç–∞ UX"
2. –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ GitHub: git push origin main
3. –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ GitHub Pages –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
4. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–µ–ø–ª–æ–π: https://qirimca.github.io/AnyLanguage-Word-Guessing-Game/

üí° –Ø–∫—â–æ GitHub Pages –≤—Å–µ —â–µ –Ω–µ –ø—Ä–∞—Ü—é—î:
   - –ü–µ—Ä–µ–π—Ç–∏ –≤ Settings ‚Üí Pages
   - Source: GitHub Actions
   - –î–æ—á–µ–∫–∞—Ç–∏—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è workflow (–∑–µ–ª–µ–Ω–∞ –≥–∞–ª–æ—á–∫–∞ –≤ Actions)
"@ "Success"

Write-ColoredOutput "`nüîó –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:" "Info"
Write-ColoredOutput "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: https://docs.github.com/en/pages/getting-started-with-github-pages" "Info"
Write-ColoredOutput "üõ†Ô∏è GitHub Actions: https://github.com/qirimca/AnyLanguage-Word-Guessing-Game/actions" "Info"
Write-ColoredOutput "üéÆ –í–∞—à–∞ –≥—Ä–∞: https://qirimca.github.io/AnyLanguage-Word-Guessing-Game/" "Info"

Write-ColoredOutput "`nüì¶ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤: $backupPath" "Warning"